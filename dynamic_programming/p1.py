def count_cal(s1, s2, n, m, dp):
    # print(dp)
    if n < 0 or m < 0:
        return 0

    if dp[n][m] != -1:
        return dp[n][m]

    if s1[n] == s2[m]:
        dp[n][m] = 1 + count_cal(s1, s2, n - 1, m - 1, dp)
        return dp[n][m]

    dp[n][m] = max(count_cal(s1, s2, n - 1, m, dp), count_cal(s1, s2, n, m - 1, dp))
    return dp[n][m]


# Function to find the length of longest common subsequence in two strings.
def lcs(x, y, s1, s2):
    dp2 = [[-1 for i in range(y + 1)] for j in range(x + 1)]
    # dp2 = [x+1][y+1]

    x = count_cal(s1, s2, x - 1, y - 1, dp2)
    # print(dp)
    return x

a = lcs(560, 550, "RTCNBKHNRHDIOEKOSLMJCOKPIDBBARHDQHPJOIHSFTMSAAAFSDQCTJDOKILGTCPRSFRCNJIMPPNDSNNQCJOQKGPKCJIRSBDLSRMLKCQEIPMLLLCDHSIDLHETBOJDIJHFOAAFMFNCTAPKEDABQNECJEQDLQEIKGEGGNBEIEJFJFRDNERMFKFLIDNRLKOEHRIPDJIHGSPKFOFHFGCCEGTIFOJMNNTCEJJMBSDABMGSAHBORCAILESKMIPNLPIQMSFRTOTFBBQHORQEELSBKQREAKPECCLAIJKBKBRTHNMFSTCAKJHLSKCMGTBMRSGHARPGBJTKHJGORSHMJBJMHHJAGLFTKNHBTGPKFILOADCMKRDKDSHBEGIJLPDLBRARFIQGFCIHLFQBCISTQMNGRQITJBDNPREJIMRKCRFQHLILMTFTNTPLALJGKLJNIKSDBGSSADIKNQHDJPCCCIIPPGHGTFBPDHQMHMPFGDAFFMDIMDKPOSHQSCTOOCIHNIJEIEQMICJBCDBAKDGPBGFMKFDDHCMEBCNOABBHIPPGIGORTQMCJHLA", "SGRFSJDDQIEQQDKSLGGHQQQEGRKQDJNALRPMOEHECGSMMHQNQHSFORBBMGONKIDTBDHMLGSDGIHDPERMFPLBBOTEEMGEERCTHKTMSTSIEHTJKHGCCJBISOIEDSJTFDAGSBFKHIBGJSLGQOQQEKEFJFHHEMOISSTNNFQMRDCTFRNOOPFODEBPFQTDQPPAPHBIJEQTRPENHRCIHOPMSJSNGOKJTODTPNEDKNNOOJNJAJHJABRFKNJQBPLJMRCMHASJPRTLRDEOANCFMKKLCCQACDCGQAEFKFJEEHSQRIBCGCNQFIEETKFNELLSGIREBGMCOLGKDRELCPSSIMCNMRKSEKOHHIRGTCTQFBHJHNNKRADCTFECGNJJJBTCSBRTFKKNMKFJMIBDPKLJKLGLJEBQMGGHABDKTEFLANFOLKGSDMKLBSMDERSMBDESBOARMLEAESBTDIRTGKQECDCDPNABPITCIQBSRMHBJSCBBFTFHJMEQNMLIDPGGEMQRREOFNOCPQBFMNKBHLQGJBGLMDDNALEAJDLBBFNDRAEIFF")
print("Aaaa",  a)
